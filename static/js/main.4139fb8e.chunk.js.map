{"version":3,"sources":["Components/Header.js","container.js","Components/Error.js","Task/index.js","TaskList/index.js","Components/ShowProducts.js","Actions/index.js","TaskBar/index.js","App.js","serviceWorker.js","Reducers/index.js","index.js"],"names":["Header","react_default","a","createElement","className","react_router_dom","to","exact","strict","Component","Container","Components_Header","this","props","children","Error","Task","task","TaskList","tasks","map","index","src_Task","key","connect","state","ShowProducts","src_TaskList","addTask","type","payload","TaskBar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","add","e","preventDefault","textInput1","current","value","textInput2","textInput3","React","createRef","Fragment","onSubmit","htmlFor","id","placeholder","ref","dispatch","bindActionCreators","App","container","react_router","path","component","Boolean","window","location","hostname","match","reducers","combineReducers","arguments","length","undefined","action","concat","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4139fb8e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { NavLink } from \"react-router-dom\";\n\nclass Header extends Component {\n  render() {\n    return (\n        <header>\n            <h1 className=\"float-left\">Product Management System</h1>\n            <ul className=\"nav justify-content-end float-right pt-1\">\n                    <li className = \"nav-item\">\n                    <NavLink to = \"/\" exact strict className = \"nav-link\">Add Product</NavLink>\n                    </li>\n                    <li className = \"nav-item\">\n                    <NavLink to = \"/showproducts\" exact className = \"nav-link\">Show Products</NavLink>\n                    </li>\n             </ul>\n         </header>\n       \n    )\n  }\n}\n\nexport default Header\n\n\n\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport Header from \"./Components/Header\";\n\nclass Container extends Component {\n  render() {\n    return (\n    <Router>\n         <Header />\n        {this.props.children}\n    </Router>\n)\n  }\n}\n\nexport default Container;\n","import React from 'react'\n\nconst Error = () => {\n    return (\n        <h1>Page not found. Please go to another page</h1>\n       )\n }\n    \n    \nexport default Error;\n","import React, { Component } from 'react'\n\nclass Task extends Component {\n  render() {\n    //console.log(this.props)\n    return (\n        <div className=\"product-details\">\n        {this.props.task}\n       </div>\n    )\n  }\n}\n\nexport default Task;\n\n\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\n\nimport Task from \"../Task/index\"\n\nclass TaskList extends Component {\n  render() {\n    return (\n      <div className=\"card\">\n       \n        {this.props.tasks.map((task,index) => {\n            return(<Task key={index} task={task}/>)\n        })}\n      </div>\n    )\n  }\n}\n\n\nfunction mapStateToProps(state){\n    return{\n        tasks:state.tasks\n    }\n}\n\nexport default connect(mapStateToProps)(TaskList);","import React, { Component } from 'react'\nimport TaskList from \"../TaskList/index\"\n\nclass ShowProducts extends Component {\n  render() {\n    return (\n      <div>\n       <h2 className=\"my-3\">Show Products</h2>\n        <TaskList />\n      </div>\n    )\n  }\n}\n\nexport default ShowProducts;\n","export const addTask = (task) => {\n    return{\n        type:\"ADD_TASK\",\n        payload:task\n    }\n}","import React, { Component } from 'react';\n\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\n\nimport { addTask } from \"../Actions/index\" ;\nimport TaskList from '../TaskList';\n\nclass TaskBar extends Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.textInput1 = React.createRef();\n        this.textInput2 = React.createRef();\n        this.textInput3 = React.createRef();\n      }\n\n     add = (e) =>{\n        e.preventDefault();\n       \n        this.props.addTask(\"Name: \" + this.textInput1.current.value)\n        this.props.addTask(\"Description: \" + this.textInput2.current.value)\n        this.props.addTask(\"Price: \" + this.textInput3.current.value)\n       \n    }\n   \n    \n\n\n\n  render() {\n      \n    return (\n    <React.Fragment>\n        <h2 className=\"my-3\">Add Product</h2>\n            <form onSubmit={this.add} className=\"form-group\">\n                <label htmlFor=\"productName\">Product Name:</label>\n                <input \n                        type=\"text\" \n                        className=\"form-control  mb-3\" \n                        id=\"productName\"\n                        placeholder=\"Product Name...\" \n                        ref={this.textInput1}\n                />\n                <label htmlFor=\"description\">Product Description:</label>\n\n                <input \n                        type=\"text\" \n                        className=\"form-control mb-3\" \n                        id=\"description\" \n                        placeholder=\"Product Description...\" \n                        ref={this.textInput2}\n                />\n\n                <label htmlFor=\"price\">Product Price:</label>\n\n                <input \n                        type=\"number\" \n                        className=\"form-control mb-3\" \n                        id=\"price\" \n                        placeholder=\"Product Price...\"  \n                        ref={this.textInput3}\n                />\n                <button type=\"submit\" className=\"btn btn-primary my-2\">Add Product</button>\n        </form>\n        <div className=\"product-wrapper\">\n        <TaskList />\n        </div>\n           \n        </React.Fragment>     \n                \n\n       \n             )\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n    return bindActionCreators({addTask}, dispatch)\n}\n\nexport default connect(null, mapDispatchToProps)(TaskBar);\n","import React, { Component } from 'react';\nimport { Route, Switch } from \"react-router-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Container from \"./container\";\nimport Error from \"./Components/Error\";\n//import AddProducts from \"./Components/AddProducts\";\nimport ShowProducts from \"./Components/ShowProducts\";\n\nimport TaskBar from \"./TaskBar/index\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className = \"container\">\n       \n      <Container>\n          <Switch>\n            <Route path=\"/\" exact component={TaskBar}></Route> \n            <Route path=\"/showproducts\" exact component={ShowProducts}></Route>\n            <Route component={Error}></Route>\n          </Switch>\n       </Container>\n    </div>\n    );\n  } \n}\n\nexport default App;\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\n\nconst taskReducer = (state=[], action) => {\n        switch(action.type){\n            case'ADD_TASK':\n            state = state.concat(action.payload);\n            break;\n\n            default:\n            break;\n        }\n\n            return state;\n\n\n},\n\nreducers = combineReducers({\n    tasks:taskReducer\n});\n\nexport default reducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport reducers from \"./Reducers/\";\n\nlet store = createStore(reducers);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}